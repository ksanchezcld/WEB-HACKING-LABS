[Info Gathering]

1- telnet vulnerable 80

GET / HTTP/1.1
Host: vulnerable

2- openssl s_client -connect vulnerable:443



Web applications present all the risks of normal applications:

- Compromise.
- Information leak.
- Reputational damage.
- Information lost.
- Money lost.

Most web applications rely on 3 components:

- The client: a web browser in most cases.

- The web server that will receive requests from the client. An application server can be involved to process the requests, in that case
the web server will just forward the requests to the application server.

- The storage backend to retrieve and save information: most commonly a database.

Client side technologies

Most of the client side technologies are used every day by most Internet users:
HTML, JavaScript, Flash... through their browsers (Chromium, Firefox, Internet
Explorer, Safari...). However, web applications' clients can also be a thick client
connecting to a web service or just a script.


Server side technologies

On the server side a lot of technologies can be used and even if all can be
vulnerable to any web issue, some issues are more likely to happen for a given
technology.

The server side can be divided into more sub-categories:

- Web servers like Apache, lighttpd, Nginx, IIS...
- Application servers like Tomcat, Jboss, Oracle Application server...
- The programming language used: PHP, Java, Ruby, Python, ASP,C#, ... This programming language can also be used as part of a framework like Ruby-on-Rails, .Net MVC, Django.

Storage backend

The storage backend can be located on the same server as the web server or on a different one. This can explain weird behaviour during the exploitation of some vulnerabilities.

A few examples of backends are:
- Simple files.
- Relational databases like Mysql, Oracle, SQL Server, PostgreSQL.
- Other databases like MongoDB, CouchDB.
- Directories like openLDAP or Active Directory.